@page "/"
@inject HttpClient HttpClient

<div class="main">
    <ul class="pizza-cards">
        @if (specials is not null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    @if (order.Pizzas.Any())
    {
        <!-- Campo para introducir el código de descuento -->
        <div class="table-bordered">
            <label for="discountCode">Discount Code:</label>
            <input class="blockquote" type="text" id="discountCode" @bind="discountCode" />
            <button class="btn btn-primary" @onclick="ApplyDiscount">Apply</button>
            <!-- Si existe, se muestra el mensaje de error -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
        </div>
    }
    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog 
        Pizza="configuringPizza"
                          OnCancel="CancelConfigurePizzaDialog"
                          OnConfirm="ConfirmConfigurePizzaDialog" />
}

@code {
    List<PizzaSpecial>? specials;
    Pizza? configuringPizza;
    bool showingConfigureDialog;
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
            {
                Special = special,
                SpecialId = special.Id,
                Size = Pizza.DefaultSize,
                Toppings = new List<PizzaTopping>(),
            };

        showingConfigureDialog = true;
    }

    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        if (configuringPizza is not null)
        {
            order.Pizzas.Add(configuringPizza);
            configuringPizza = null;
        }

        showingConfigureDialog = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {
        await HttpClient.PostAsJsonAsync("orders", order);
        order = new Order();
    }

    string discountCode = "";
    bool discountApplied = false;
    string errorMessage = "";

    // Método para aplicar el descuento
    void ApplyDiscount()
    {
        if (!discountApplied) // Verificar si el descuento no se ha aplicado ya
        {
            if (discountCode == "DISCOUNT1") //"DISCOUNT1" es el código de descuento válido
            {
                // Aplicar el descuento a cada pizza
                foreach (var pizza in order.Pizzas)
                {
                    // Calcular el descuento del 30%
                    decimal discountAmount = pizza.Special.BasePrice * 0.3m;
                    pizza.Special.BasePrice -= discountAmount;
                }
                // Marcar que el descuento se aplicó
                discountApplied = true;
                errorMessage = "Valid discount code. Here's your discount!";
            }
            else
            {
                // Mostrar mensaje de error si el código de descuento es inválido
                errorMessage = "Invalid discount code. Please try again.";
            }
        }
        else
        {
            // Mostrar mensaje de error si el código de descuento ya se ha usado
            errorMessage = "You already applied the discount.";
        }
    }
} 